what node.js includes

What does the runtime include beyond the engine. V8 allows us to run JS. What happens when we do other things that the browser can't.

Inside the runtime...
v8 engine, node.js APIs (file system, http requests, look up paths, crypto functionality to make programs more secure). When V8 sees some code that uses these features, it calls the corresponding functionality in the API's some of it is written in JS and some in lower level langauges like C or C++. This is where node.js bindings become important as these bindings are what lets your JS code call functionality that's implemented in other langauges. 

The actual functionality of these API's lives in libuv. Libuv and V8 are the two most important internal components of Node. LibUV deals with input and output tasks. It is highly optimized library of code written in C that deal with i/o that node can delegate to other parts of the operating system. 

A download request is input that is asking for output from the web server. the req is from JS using the HTTP module, through the node bindings, node will pass that task onto libUV which will tell the OS the things it needs. The OS will go off and perform those tasks. The JS doesn't wait around for the response. Node tells the OS to let it know when the request is complete and it will get back on it as soon as it can. This is async input/output. It is what Node is best at. 

Nearly all the code we write in node involves some form of async i/o. This includes functionaly from libUV. The way you do things on windows, mac or linux are actually different like opening a file. This is where libUV shines as it abstracts away all of the specific ways of reading a file. Node works on any system, on any platform it does this by implementing the functionality in libUV and exposing it to the node.js bindings which is then translated back to our JS.

________________________________________________________________________________________

Node Internals Deep dive

https://github.com/nodejs/node - the actual code that makes up node. 

two folders that are most interesting are the lib and src folders

lib - is the js side of the our node api's. Each module in our node documentation. 

src - this is the C++ side with low level node.js bindings. It is the connection between JS and C++.  

________________________________________________________________________________________

libuv Internals Deep dive

https://libuv.org/

Node allows us to use libUV becuase of the bindings. Other programming languages use libUV too. 

after looking at the code...

most of the C code is in the src folder. In the src there is a unix and windows folder. 

________________________________________________________________________________________

Synchronous vs Asynchronous

async - doesn't run line by line in sequence. 

sync - means code runs line by line in sequence.

________________________________________________________________________________________

Asynchronous callbacks

Node.js - is an Asynchronous event-driven JS runtime. Designed to build scalable network applications. 

FILE : race.js

________________________________________________________________________________________

non-blocking input & output

 what is non-blocking function - functions that happen in the background or in parallel to rest of code. Settimeout is an example. It is happening in the background while the next line of code gets read. 

 blocking code happens synchronously. ex. JSON.stringify({food: 'love'}); this is a blocking function as stringify happens until it is done. 

 we want to make sure our long running functions are non-blocking allowing node to execute more code. 

 ________________________________________________________________________________________

 Is JS Asynchronous

 out of the box JS is Synchronous, however, we can write async code where we can do a callback in the future. When JS is run in certain environments like browser or node, it allows us to write asynchronous functionality. But the async functionality comes from other apis like the window object or the global object. So JS can behave in an async way but it doesn't come that way outside of the box, you have to manipulate it to be this way. 

 ________________________________________________________________________________________

 Multi-Threading, Processes and Threads

 Way to take advantage of multiple cores in a computer are by using threads. 

 we start from processes - processes are containers containing your code, which lives in the memory of which lives in the memory of the process.

 Code - may be a function that calls a second function and the second function just returns something. Then we have some code that creates a new thread using code from the first function and then another new thread that does the same thing, using code from the the first function. This is pseudocode, it is multi-threaded like java or c++. The idea is to have two threads running the fist function asynchronously. We are passing a function into a new thread twice this is async. 

 What happens in our process is that a new thread is created and it has a call stack. it represents the sequence of operations that live inside the call stack. Which is in turn part of the thread. Like a stack of bricks, new function calls go onto the top of the stack and, functions that are done executing are removed from the top. 
 
  stack -> first new thread function (this calls the first function which in turns calls the second function), second function goes onto the stack, then when the second function returns it's data, it gets removed from the stack, the first function would also be done because it receives the data and, then the first function would be removed from the stack.

  With two threads, we would have the same thing going on but in there own call stacks so we would have two threads with call stacks in them. they would run asynchronously. The two threads don't have to be at the same point, they can be different timing of when they finish. 

  Threads can execute side by side and the CPU can constantly switch back and forth from one thread to another to simulate executing them in parallel. But if we have multiple cores, each core can be dedicated to executing one thread. These two threads are independent of each other. 

  We don't have to worry about this with JS, it is a single - threaded language. 

  ________________________________________________________________________________________

  is Node.js Multi-threaded?

the thing that allowed Node to be so successful is the ability to run JS asynchronously and doing this in such a way that developers could focus on the application rather than complicated multi-threaded logic. JS is single-threaded. If it's not threads that how does node allow us to run code asynchronously? Node JS executes JS code so it has to follow the same way, there is one main thread. This one thread runs the V8 engine, the apis, and libUV. 

However, this isn't the complete picture. libUV handles our async i/o. FS operations and network operations. We can do this asynchronously because of the event loop. There is a thread pool in libuv, it is written in C which has threads, so these are like those in our process explained earlier. There are four default threads waiting beyond the main thread. This is a limited amount of threads. If we run out of threads, we have to wait for something to complete before we can use the thread for something else. Node actively tries to not use threads. Instead where possible node tries to use the OS Kernal instead of using the valuable resources of the thread pool. When the OS finishes what it was doing, the event loop will be notified to run the event loop on any callback. This is what node.js allows async code to run. 

________________________________________________________________________________________

The Event loop

The event loop is a crucial mechanism in Node.js that allows it to handle non-blocking I/O operations efficiently, despite being single-threaded. It enables asynchronous execution, allowing Node.js to handle multiple tasks simultaneously without blocking the main thread.

How the Event Loop Works
1. Call Stack Execution (Synchronous Code)
  • When a Node.js program starts, it executes synchronous code line by line in the call stack.

2. Callbacks & Async Tasks Sent to the Event Loop
  • When an asynchronous operation (like I/O, setTimeout, setImmediate, Promises, or network requests) is encountered, Node.js sends it to the appropriate API or thread pool (if needed) and does not block execution.

3. Event Loop Phases
The event loop consists of multiple phases, each handling different types of tasks:
  • Timers Phase → Executes setTimeout() and setInterval() callbacks when their delay time is reached.
  • Pending Callbacks Phase → Handles I/O callbacks deferred from the previous cycle.
  • Idle & Prepare Phase → Internal use only.
  • Poll Phase → Retrieves new I/O events (e.g., file system or network requests) and executes callbacks if available.
  • Check Phase → Executes setImmediate() callbacks.
  • Close Callbacks Phase → Handles closed connections (e.g., socket.on('close', callback)).

4. Microtasks (Priority Tasks)
Microtasks (like process.nextTick() and Promise callbacks) have higher priority than normal tasks and are executed between phases.

console.log("1: Start");
setTimeout(() => console.log("2: setTimeout"), 0);
Promise.resolve().then(() => console.log("3: Promise resolved"));
process.nextTick(() => console.log("4: process.nextTick"));
console.log("5: End");

1: Start
5: End
4: process.nextTick
3: Promise resolved
2: setTimeout

Why?
1 Synchronous code runs first (console.log statements).
2 process.nextTick() runs immediately after synchronous code.
3 Promise callback runs next (as a microtask).
4 setTimeout() runs last in the event loop.
Key Takeaways
• Node.js delegates tasks to different APIs instead of blocking execution.
• Microtasks (process.nextTick and Promises) run before normal event loop tasks.
• The event loop ensures efficient concurrency, making Node.js great for I/O-heavy applications.

________________________________________________________________________________________

Callback Queues

The callback queue in Node.js is where asynchronous task callbacks wait to be executed when their respective event loop phase is reached. It's a fundamental part of how Node.js manages non-blocking operations efficiently.

How the Callback Queue Works
When an asynchronous operation (such as I/O, timers, or setImmediate) completes, its callback function is pushed into the appropriate queue. The event loop then picks up these callbacks and executes them when the corresponding phase arrives.

Types of Callback Queues
Node.js has multiple callback queues, each corresponding to different types of asynchronous operations:

1 Timer Queue (setTimeout, setInterval)
  • Stores callbacks scheduled by setTimeout() and setInterval().
  • These callbacks execute in the Timers Phase of the event loop.
  • Execution occurs only after the specified time delay and when the event loop reaches this phase.
2 I/O Queue (File System, Network Requests)
  • Stores callbacks for completed I/O operations (like reading files, database queries, etc.).
  • These execute in the Poll Phase, which waits for new I/O events and executes ready callbacks.
3 Check Queue (setImmediate)
  • Stores callbacks scheduled by setImmediate().
  • Executes in the Check Phase, immediately after the Poll Phase.
  •Always executes before timers (if both are scheduled together).
4 Close Callbacks Queue
  • Stores callbacks for closed connections (e.g., socket.on('close', callback)).
  • Runs in the Close Callbacks Phase of the event loop.

Special Priority Queues (Microtask Queue)
Node.js has higher-priority queues that execute before the callback queue:

1 Next Tick Queue (process.nextTick)
  • Stores callbacks from process.nextTick().
  • Always executes right after synchronous code, before the event loop moves to the next phase.
2 Microtask Queue (Promises & Async/Await)
  • Stores callbacks from resolved Promises (Promise.then()).
  • Executes after the current operation but before the event loop moves to the next phase.

console.log("1: Start");

// Timer (setTimeout) → goes to Timer Queue
setTimeout(() => console.log("2: setTimeout"), 0);

// setImmediate → goes to Check Queue
setImmediate(() => console.log("3: setImmediate"));

// I/O operation (fs.readFile simulates an async operation)
const fs = require("fs");
fs.readFile(__filename, () => console.log("4: File Read (I/O callback)"));

// Promise (Microtask Queue)
Promise.resolve().then(() => console.log("5: Promise resolved"));

// process.nextTick (Next Tick Queue)
process.nextTick(() => console.log("6: process.nextTick"));

console.log("7: End");

1: Start
7: End
6: process.nextTick
5: Promise resolved
4: File Read (I/O callback)
3: setImmediate
2: setTimeout

________________________________________________________________________________________

Phases of the Event Loop

The event loop is the core of Node.js’s asynchronous, non-blocking architecture. It continuously executes tasks in a loop, handling various types of operations in distinct phases.

The 6 Phases of the Event Loop
Each iteration of the event loop (called a tick) consists of six key phases:

1 Timers Phase ⏳
2 I/O Callbacks Phase 📩
3 Idle, Prepare Phase (Internal)
4 Poll Phase 🔄
5 Check Phase ✅
6 Close Callbacks Phase 🔐

1. Timers Phase ⏳
Handles: setTimeout(), setInterval()

What Happens?
Executes callbacks scheduled by setTimeout() and setInterval(), if their delay has expired.
If no timers are ready, Node.js moves to the next phase.

2. I/O Callbacks Phase 📩
Handles: Completed I/O operations (excluding fs, sockets, or timers), Some types of network requests

What Happens?
Runs callbacks for deferred I/O tasks, like errors from TCP connections.
This phase is not for general I/O operations like reading files (those are handled in the Poll Phase).

3. Idle, Prepare Phase (Internal)
Used internally by Node.js.
Prepares for the Poll Phase.
Not relevant for application-level code.

4. Poll Phase 🔄
Handles:  I/O operations (file system, network, database queries), Waiting for new I/O events

What Happens?
• If there are pending I/O tasks, they are executed here.
• If the queue is empty, the event loop:
    • Waits for new events (if necessary).
    • Moves to the Check Phase if there are no timers left.

5. Check Phase ✅
Handles: setImmediate() callbacks

What Happens?
Executes callbacks from setImmediate().
This phase runs immediately after the Poll Phase.

6. Close Callbacks Phase 🔐
Handles: Cleanup for closed resources (e.g., socket.on('close', callback)).

What Happens?
If a socket or stream is closed, its close event callback runs in this phase.


Microtask Queue (Runs Between Phases)
In addition to these six phases, Node.js has high-priority queues:

1. process.nextTick() Queue (Executes after synchronous code but before the next event loop phase)
2. Microtask Queue (Handles resolved Promises & queueMicrotask())
🔹 These always execute before the next event loop phase begins.

________________________________________________________________________________________

What is Node.js Best At?

Node is really good at servers. When your main performance problem is input and output rather than calculations. 

________________________________________________________________________________________

Observer Design Pattern

The Observer Pattern is a behavioral design pattern where an object (called the Subject) maintains a list of dependents (Observers) that get notified of any state changes. It follows a one-to-many relationship.

How It Works
1 Subject (Observable)
  • Maintains a list of observers (subscribers).
  • Provides methods to add, remove, and notify observers.
2 Observers (Subscribers)
  • Listen for updates from the Subject.
  • React when notified.

________________________________________________________________________________________

EventEmitter

In Node.js, the EventEmitter is a built-in module that implements the Observer pattern. It allows objects to emit events and listen for them, making it a core part of the event-driven architecture in Node.js.

How EventEmitter Works
1 Create an EventEmitter instance
2 Register listeners (subscribers) for events
3 Emit events to trigger those listeners
4 Remove listeners when needed

Key Methods in EventEmitter
Method	                              Description
.on(event, listener)	      Adds a listener for the specified event.
.once(event, listener)	    Adds a one-time listener (removes itself after being called).
.emit(event, ...args) 	    Triggers the event and calls all listeners.
.off(event, listener)	      Removes a specific listener.
.removeAllListeners(event)	Removes all listeners for an event.
.listenerCount(event)	       Returns the number of listeners for an event.

process also includes emitters like process.on('exit', ()=>{})