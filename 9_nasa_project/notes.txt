Nasa Project

Current way, just change into the project main folder. Just look at package.json

npm run deploy

second old way

npm run watch

below is old way

to run go into the server folder and do 
npm start

then in client folder do
npm start
________________________________________________________________________________________

Intro and Archtecture

way to set up or diagram out your project.
lucid.app/lucidchart/

other programs to do this include glyphy, MS visio, or PS, sketch

in our folder structure, we will need models which is our data and routes which handle our routes. We are using MVC but, we don't need a controllers folder. For larger applications it tends to be good to keep related code together and only separate code that deals with different functionality. For our structure it means that our controllers are going to live alongside our routes, because the controllers defines how we respond to that specific route. So the code that deals with handling our API endpoints and the code for our controllers will be side by side under this routes folder. 

For views, we will be having a separate client (front-end) where our client is going to be a dedicated front-end project and we're going to be sending data which it will be in full control of displaying however it chooses. So we don't need a views folder.

for large programs with seperate front/back ends it is common that we create multiple node packages for 
those different parts of our application that all live inside of our main project folder. So we will have a package.json at the root and, one in each of the client/server folders.

________________________________________________________________________________________

NASA Dashboard front end setup

We are using code provided for us in a downloadable zip folder, just copy pasted into the client folder and then in terminal went into the folder and ran "npm install". Needed to run "npm audit fix" as well. 

________________________________________________________________________________________

NASA Dashboard functionality

With front end already set up, we need to understand what the back end needs to accomplish. Going through the pages, there is an upcoming section that lists out missions to come and, a history section that shows previous missions. Along with this, on the launch page there is a dropdown that appears to need a destination

________________________________________________________________________________________

React.js Front End walkthrough

using react-scripts to help with running our scripts npm run start, npm run build...

rest of video was just walking through a react project and does point out that the hooks > request.js file shows what kind of requests need to be made

________________________________________________________________________________________

API Server setup

go into server folder in terminal and do "npm init -y" to get the package.json. 

npm i express
npm i --save-dev nodemon 

will follow same structure as client, so created a src folder and moved server.js and models/routes folders into it. This means in the package.json file have to update adding in src/ before server.js

Then start adding express into server.js

NEW: inside of "start" : "PORT=5000 ndoe src/server.js"

can set the port here and it will fill in as process.env.PORT inside of the server.js. Means you can work around not having an actual process.env file. Though that is still the better way to do it. 

________________________________________________________________________________________

EXPLANATION of what happened last video in server.js and app.js files 

app.js file:
1. Importing Express:
const express = require('express');
Here, you're importing the express module, which is a popular web framework for Node.js. Express simplifies routing and handling HTTP requests.

2. Creating the Express Application:
const app = express();
express() is a function that initializes an Express application. This app object will hold all the middleware, routes, and configurations related to your web application.

3. Using Middleware to Handle JSON Requests:
app.use(express.json());
app.use() is a method that mounts middleware to the Express app. Here, express.json() is a middleware function that allows your app to automatically parse incoming JSON payloads from requests (e.g., when you send JSON data in a POST request). This is useful for handling APIs that deal with JSON data.

4. Exporting the Express App:
module.exports = app;
Finally, you're exporting the app object so that it can be used in other files (in this case, server.js). By separating the server logic and the app logic, you're making the code more modular and easier to manage.

server.js file:
1. Importing HTTP and the Express Application:
const http = require('http');
const app = require('./app');
You're importing the native http module from Node.js, which is used to create an HTTP server. You also import the app object from the app.js file, which contains all the Express functionality.

2. Setting the Port:
const PORT = process.env.PORT || 8000;
This line sets the port on which the server will listen. It first checks if there's a PORT environment variable set (for example, in production), and if not, it defaults to 8000.

3. Creating an HTTP Server Using http.createServer:
const server = http.createServer(app);
This is where you integrate Express with the HTTP server. By passing the app (Express application) into http.createServer(), you're telling Node to use your Express application to handle incoming HTTP requests.

http.createServer() is a lower-level Node.js function that creates an HTTP server instance. It needs to be provided with a request handler. By passing app into this function, you're essentially saying that for every incoming request, it should be handled by the Express application (which is the app object).

Normally, when using Express, you can use app.listen() to set up a server. But in this case, you're manually creating the server and passing the Express app to it.

4. Starting the Server and Listening for Requests:
server.listen(PORT, () => {
  console.log(`Listening on port ${PORT}...`);
});
The server.listen() method starts the server and listens for incoming requests on the specified PORT. When the server is up and running, it logs a message saying it's listening on the defined port.

Why use http.createServer with Express?
1. Separation of Concerns:

By separating the Express application setup (app.js) and the HTTP server logic (server.js), you're following a modular structure that is easier to maintain and extend. This separation allows you to organize your code better and isolate concerns like routing and middleware (in app.js) from server configuration and handling (in server.js).

2. Flexibility with Custom Servers:

Using http.createServer gives you the flexibility to customize how the server handles incoming requests. For example, you could add additional listeners for different types of requests, integrate with other libraries, or apply advanced server configurations that aren't easily achievable with just app.listen().

3. Integration with Other Server-Side Features:

If you want to integrate additional functionality, like WebSockets or server-sent events (SSE), you can easily do that with http.createServer. By creating a custom server, you can use the same app instance from Express while also using other Node.js functionalities that might not be directly available with the default Express setup.

Recap:
Express (app.js): Handles routing, middleware, and web application logic.

HTTP server (server.js): Uses the http module to create and manage the server, which is passed the Express app to handle HTTP requests.

The separation allows for greater flexibility, better modularization of code, and the possibility of extending server-side functionality beyond what Express itself offers.

________________________________________________________________________________________

GET / planets

Following what we learned in 8_express_api, we will do the same type of the thing, set up a planets.router.js, planets.controller.js and planets.model.js file. The code structure is pretty much the same thing. 

once this is set up, we went back into the client > src > hooks >requests.js and set up httpGetPlanets()

At this point it was ready to test. Mind you that the array was empty and, the point of it was we get a CORS error because one is on localhost:3000 and other is localhost:8000

________________________________________________________________________________________

CORS middleware

How to fix an origin error.

Cross Origin requests are those that are made from a domain on one origin to a different origin, where an origin is the combination of the sites protocol, host and port (ex https://www.goodle.com:443/maps/). As a security feature browsers block cross origin requests so you don't leak data unintentionally. We can allow it by sending Access-Control-Allow-Origin: https://www.google.com header from the server, which will allow either all (*) or from a specific origin if we specify it's value. This is whitelisting. 

When using Express, it is as easy as adding some middleware before our routes. 

if we search the npm registry for CORS we will find packages that do so. Next install in terminal the package. In the server folder...

npm install cors

once installed we can put it into our middleware chain in app.js
you can set it up for multiple origins
const whitelist = ['http://example1.com', 'http://example2.com'];

var corsOptions = {
  origin: function(origin, callback) {
    if (whitelist.indexof(origin) !=== -1) {
      callback(null, true)
    } else {
      callback(new Error('Not allowed by CORS'))
    }
  }
}

app.use(cors(corsOptions));

now if you start the client and server you will see it works and can check the network tab > planets to see the call and response 

________________________________________________________________________________________

Models vs Controllers vs Routers

Why is Models separate from Controllers/Routers when it was mentioned code that is for similar thing should be kept together which is why we have Controllers/Routers in same folder.

The reason is that we keep the two together because they are one to one. There is always a controller for a router. For our models, there may be many models being used by one controller or it's possible that one of the models is used in multiple controllers. We separate our data from our endpoints because they don't necessarily match one to one. 

________________________________________________________________________________________

Planets Model

Going to adapt the code we used in 6_file_input_output_planets_project

Once we have installed csv-parse and, exported the module, we will run into an issue where the data isn't being gathered as expected. There is an issue with they asynchronous code dealing with the planets. 

We are using streams and node won't wait for any of our stream code to complete before it returns our 
module.exports. 

________________________________________________________________________________________

Loading Data on Startup

Our planet data is loaded and parsed as a stream. It happens asynchronously but, node doesn't wait around for it, it exports the planets before the stream is finished which means we aren't sending the data we expect to send. 

We can instead create a JS promise for our loading code. And wait for the promise to resolve before accepting any incoming requests in our controller. 

const promise = new promise(resolve, reject) => {resolve(42)};
promise.then((result => {}));
await result = await promise;
console.log(result);

We are doing this type of promise logic in the planets.models.js file in order to make sure the data is loaded before moving forward. Once promised is wrapped, we export the function and bring that into server.js. Then we need to create an async function that can await for the data. 

Also, need to create the path to the correct file as we put the data inside a data folder.

NOTE: starting with node 15 there is a sterams promises API. So this may be a better way of doing this. 

________________________________________________________________________________________

Automating Full StackApps with npm

currently we have to run our program by starting both client and server packages going into each and starting them. So now we will update to do both.

inside project and not inside either folder we will do...

npm init -y 

won't have any modules or dependencies


    "install-server": "npm install --prefix server",
    "install-client": "npm install --prefix client",
    "install": "npm run install-server && npm run install-client",
    "server": "npm run watch --prefix server",
    "client": "npm start --prefix client",
    "watch": "npm run server & npm run client",

Note the differences using && and just & 
&& - waits until first one is done then does second one
& - runs both at same time

Don't forget about gitignore files.

________________________________________________________________________________________

Serving React.js Front End in production

How do we run this in production?

When we want to run our project in production we often want to run them in one server. Ideally we want to have the ability to serve our front end from the same server as our API. This way we don't have to manage two separate servers at different URLs. The way we do this is in our client, if we are using React, we first build our project, including framework, source code and any assets we are using into a single build folder that is optimized for production.  

Withour client here, we look into package.json we have a build script. when it gets run, it creates a new folder called build with everything in it. Most frameworks do this and end up in a dist or build folder.

We don't want this build folder to be in our client folder so we can set it up to move it by going into the package.json within the client folder. We do this...

"build": "BUILD_PATH=../server/public react-scripts build",

Now when we run build on the client, it will put all the files directly into the server > public folder. This works because we are using react-scripts and it needs to be at least ^4.0.2. If this doesn't work you can simply copy the build folder files into the public folder.

Now inside of our app.js in the server, we can just serve up this code. 

Now, when we are at our project root, we can run 

npm run server

and go to localhost:8000 to see our project.

in this case we have one more issue, when we go to just localhost:8000/ the page isn't working and we have to click on launch or one of the other nav elements to load something to fix this, we go into app.js and add 

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'public', 'index.html'));
});

which tells our server what to do at the base URL.

________________________________________________________________________________________

UPDATE OF ABOVE MATERIALS with VITE

Configuring Vite to Output the Build Folder to the Server:

In a typical React with Vite setup, you would not need the complexity of manually moving the build folder, as Vite already generates the files in the dist folder by default.

However, to serve the build files directly from the server's public folder, you can modify the Vite config. This can be done by setting the build.outDir option in the vite.config.js file.

// vite.config.js
export default {
  build: {
    outDir: '../server/public', // This will make the build files go directly to the server's public folder
  },
};

This way, you don't need to manually copy the build files — Vite will automatically place them in the correct location when you run vite build.

Serving the Build Files in the Server:

If you are using Express in your server (or any other backend framework), you can serve the static files from the public folder where Vite puts the build output.

Here's how you'd set up the server to serve the front-end files after building with Vite:

const express = require('express');
const path = require('path');
const app = express();

// Serve static files from the build folder (where Vite placed them)
app.use(express.static(path.join(__dirname, 'public')));

// Catch-all route for React's client-side routing (single-page app)
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

const PORT = process.env.PORT || 8000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

The app.get('*', ...) route will handle any paths that are managed by your React app (for example, when you navigate between different routes in your app).

This ensures that all React routes, including those that the user might navigate directly to, will load the correct index.html file, which is essential for single-page apps (SPA).

________________________________________________________________________________________

Logging requests with Morgan

We want to see what the requests are. We could write our own middleware using req.method and req.url that express has built in. But we can use existing middleware.

Morgan - middleware that allows us to log out info to different streams. 

Morgan does a lot of useful things for us. It also allows us to define what data we want the logs to include, like the current date or the HTTP method of the request. Like the date or HTTP method of the request. We can also specify how to format the data that is logged. It also supports some predefined formats which meets our needs nicely. Most common is combined which corresponds to the log format used by the apache web server. it is more complete than anything we would write ourselves. 

// inside of the server folder 
npm i morgan 

as for where it should go in the middleware chain, it needs to go somewhere higher up. Should be as high as we can go before any cecurity related middleware that controls what comes in and out. 

This allows you to see what is going on, on your page. When we do "npm run deploy" it will show both front in and back end requests. 

________________________________________________________________________________________

Launches Model

Need to think about the collections we need and what models those collections require. 

Based on page build we will have ability
Launch Date - date object
Missions Name - string
Rocket Type - string
Destination Exoplanet - a planet based on a dropdown.

When we launch the mission, we will then need to keep track in both upcoming and history

The difference here is that history will also have something called customers and the upcoming will have desitnation but, each will contain a number, date, mission and rocket.

customers - funded by people could be one or more people

so now putting in pseudo code into the launches model. 

const launch = {
  flightNumber: 100,
  mission: 'Kepler Exploration X',
  rocket: 'Explorer IS1',
  launchDate: new Date('December 27, 2030'),
  destination: 'Kepler-442-b',
  customers: ['NASA', 'NOAA'],
  upcoming: true, // becomes false when it is historical
  success: true, // to track whether a mission happpened or not future-proofing to track if it happened or not
};

instead of tracking via an array we will use a map which allows us to map any value to any other value. They preserver the order in which you insert them. 

const launches = new Map();

launches.set(launch.flightNumber, launch)

we will use the flightNumber as the identifier.

launches.get(100); // will return our launch object

________________________________________________________________________________________

GET /launches

Our frontend will access launches in the upcoming and history pages. The routes we will build for the launches correspond one to one with the launches model. We won't access planets model in the launches model. 

We will follow along with what was done with planets where we set up the routes in app.js and, then create them in launches.router.js and finally build out the controller.

In the controller we want to return JSON that corresponds to the launches map from the model. However the map objects that we have aren't JSON. What we want to return from the getAllLaunches endpoint is the list of values on our launches map. All of these launch objects that we set using our set function and we can get these values by calling the values functioin on the map object. 

So launches.values() gives us an iterable iterator of values in the map where we could for example use a for of statement...

  for (const value of launches.values()) {
  }

this would allow us to loop over all of the values in our launches map. 

it isn't what we want though. We need to first convert it into a plain old JS object or an array which is also valid JSON. For this we can use Array.from(launches.values()). This gives an array containing all of the values. 

So our model uses a Map to better handle the data allowing us to index into our launches by flightNumber, and our controller is able to manipulate that data into a format that works for our API into JSON that we can return to the frontend. 

We will then go to postman and set up a ZTM - NASA and from there choose add request. We will create a GET launches request to test and see our data is coming back in JSON format. We also added this in for the planets endpoint.

Back in our code, we can now add this into the front end and, to do so we go back to the hooks>requests.js file. This will be for httpGetLaunches() which also requests they be sorted by flight number which we add in on the front end, and could do on the backend as well to make sure. 

________________________________________________________________________________________

Serving appications with client side routing

at this point when we go to localhost:8000/history we get a cannot GET /history

our production build where we server our API and api fromthe same server, gives us this error. 

currently we are serving all our assets from the public folder. 

// serve all of our public files using the path.join function.
app.use(express.static(path.join(__dirname, '..', 'public')));

this is so that in our server we can have both the frontend and the API both availble on the same port through Express. Issue is our server is handling the routing for our API endpoints, but not the routing in our client. In our client, if you look under src>applayout you see we have our routes for the frontend being handled by react. React router is also responsible for deciding what to do with that path, that URL, that we put into the browser. This is all happening in the index.html file that is being served from the public folder that contains the running react application. 

if we look through the React deployment doc, there is a serving apps with client side routing section. Ultimately the trick for this to work is to add /* into the app.js file of our server code. This is a wildcard, so will match any endpoint, it will first look through our routers because those come first and if they don't match any of the express routers, it will be passed on to the index.html file which will then take care of it. This means the frontend will handle the routing. (NOTE the above did not work had to revise to below)

Why {*any} works:
Wildcard Matching: {*any} is often used in routing systems to catch all incoming requests that haven't been explicitly handled by other routes, including both API routes and client-side routes.

Custom Routing Logic: This allows for flexible route management, where the fallback can be dynamically determined based on any unmatched path, making it easier to handle user-defined paths.

________________________________________________________________________________________

Working with Data Models: building a data access layer

What goes in the model or the controller?

ideally we don't want the controllers to be worrying about how the data in the model from our MVC pattern is stored, whether that is in a database, sowmewhere in the cloud or in memory. Our controllers should be working with our request and the response and our models can give us the data access functions which control how the data in the model can be written to and read. 

In our current code, we have 

function getAllLaunches(req, res) {
  return res.status(200).json(Array.from(launches.values()));
}

in the controller, it would be better to abstract this Array.from(...) logic into the model. What that means is that the controller only needs to know that we're using the launches odel, and from that model, we're getting all launches, which is a data access function that we will export from the model. 

So we are refactoring in launch.controller and, by doing so we also renamed the function with http... which now means that when we use this name method, it is something that we will get a response from. 

by doing this there is now a clearer divison of responsibilies between the model and the controller. Our model handles the data and how it is accessed, and the controller only ever uses the data access functions to work with the data model and then puts it altogether in a response that is useful for our frontend.

We redid the planets model/controller too.

Our data access functions are apart of what is called a layered Architecture where our application consist of multiple layers which talk to each other. We can separate our code into these layers either as standalone or in addition to the MVC pattern. This is also considered Separation of Concerns. This also means it's easier to maintain, grow and update. So as the project gets larger it follows a pattern that keeps this manageable. 

________________________________________________________________________________________

POST /launches creating Launches 1

Now going to add in functionality for when we launch a mission, this is to "POST" the mission. 

1. Server source code - could start at the router, move to controller and finally the mdoel.
2. Start with model and move down to controllers to router. 

see notes in the launches.model. 

In addition - 

If we look at our current hard coded launch we can see what data we expect from the inputs on the launch page and, those that we need to handle. Flight number we are dealing with. But there are also the customer, upcoming and success fields. 

Once the Model is done, we will go to postman and test a POST request. 

________________________________________________________________________________________

POST /launches creating Launches 2

At this point we have the set up in postman but, that is all, haven't tested it. So set up the request for what it looks like. Need to now set up the controller to handle the data and pass it to the model. 

Launch Date -
Remember our launches model has a launch date for our mission. Ideally we'd store it in a JS date object (new Date(date info here)). There are advanced date librarires like "moment" from npm that allow you to add/subtract dates and work with time zones. What we do have to deal with right now is JSON as being passed into our API doesn't allow you to pass date objects. Instead we have to pass in a string and convert it into a date in our API. 

With this done, we finished off the controller function for adding a new launch. Inside of the router, we will now set up the POST request and, while doing this, go into app.js and set up a path for launchesRouter so that we can just use '/' instead of '/lauches'.

By doing app.use('/launches', launchesRouter); 

we are lettting express to only react to requests under the /launches path. Which means inside of the launch.router, we don't need to include the /launches in our routes. It just means when we use '/' inside the router file that it matches the troot of the path where it has been mounted which is at '/launches'

Now that we have this all setup back to postman where we can now test and, it is successful. However, we are still considered fragile as our date for example could be an actual string of random text and would give us "null" in the data. 

________________________________________________________________________________________

POST /launches Validation for POST requests

There are libraries that deal with validation. Instead here we will try to lay a foundation for validation. 

Added some basic error handling to the controller function

________________________________________________________________________________________

Connecting POST /launches with front end Dashboard

here we are adding this to our hooks in the client side. 

________________________________________________________________________________________

DELETE /launches Aborting a launch 1

Doing this update in reverse starting with hook in client code and moving from there. Then route, controller, model. 

________________________________________________________________________________________

DELETE /launches Aborting a launch 2

we aren't going to actually delete, instead we are going to update the upcoming and success flags to false. This in the error of big data, will still keep it around but, will mark it as aborted. This also means that it will show up in historical page on the frontend.

we created an existsLaunchWithID which may not necessarily have been needed as we could do so in the abortLauchById but, it can be a useful tool that may be needed multiple times so kept it separate. 

________________________________________________________________________________________

Updating our Architecture Diagram